package sagelife.canvas;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.MouseEvent;
import javax.swing.event.MouseInputAdapter;
import sagelife.framework.LifeFramework;
import sagelife.framework.structures.Cell;
import sagelife.misc.Globals;

/**
 * Contains the grid to which the cells are drawn.
 *
 * @author Darin Beaudreau
 */
public class Grid extends javax.swing.JPanel {

    // Member variables.
    private LifeFramework framework;
    
    public Point mousePos;

    /**
     * Creates new form Grid
     */
    public Grid(LifeFramework framework) {
        this.framework = framework;

        // Set the preferred size of the control form.
        this.setPreferredSize(new Dimension(400, 300));
        Globals.gridSize = this.getPreferredSize();
        
        mousePos = new Point(0, 0);
        
        this.addMouseListener(new MouseInputAdapter() {
            @Override
            public void mouseClicked(MouseEvent m) {
                if(!Globals.simulationRunning) {
                    mousePos.x = m.getX();
                    mousePos.y = m.getY();
                    
                    for(int r = 0; r < Globals.rowLength; r++) {
                        for(int c = 0; c < Globals.colLength; c++) {
                            callToggleCell(r,c);
                        }
                    }
                }
            }
            @Override
            public void mouseDragged(MouseEvent m) {
                if(!Globals.simulationRunning) {
                    mousePos.x = m.getX();
                    mousePos.y = m.getY();
                    
                    for(int r = 0; r < Globals.rowLength; r++) {
                        for(int c = 0; c < Globals.colLength; c++) {
                            callToggleCell(r,c);
                        }
                    }
                }
            }
        });

        initComponents();
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        
        // Draw the cells. For now, yellow is used as the cell color. Inactive cells are not drawn to save time.
        int cellRowLength = Globals.rowLength;
        int cellColLength = Globals.colLength;
        g2d.setColor(Color.YELLOW);
        
        for(int r = 0; r < cellRowLength; r++) {
            for(int c = 0; c < cellColLength; c++) {
                Cell cell = framework.cells[r][c];
                if(cell.isAlive()) g2d.fill(cell);
            }
        }

        drawGridLines(g2d);

        //System.out.println("Grid repainted...");
    }

    private void drawGridLines(Graphics2D g2d) {
        g2d.setColor(Color.BLACK);
        
        for (int x = Globals.cellWidth; x < Globals.gridSize.width; x += Globals.cellWidth) {
            for (int y = Globals.cellHeight; y < Globals.gridSize.height; y += Globals.cellHeight) {
                g2d.drawLine(x, 0, x, Globals.gridSize.height);
                g2d.drawLine(0, y, Globals.gridSize.width, y);
            }
        }
        g2d.drawLine(0, 0, Globals.gridSize.width, 0);
        g2d.drawLine((Globals.gridSize.width - 1), 0, (Globals.gridSize.width - 1), Globals.gridSize.height);
        g2d.drawLine(Globals.gridSize.width, (Globals.gridSize.height - 1), 0, (Globals.gridSize.height - 1));
        g2d.drawLine(0, Globals.gridSize.height, 0, 0);
    }
    
    private void callToggleCell(int row, int col) {
        Cell c = framework.cells[row][col];
        if(c.contains(mousePos)) {
            framework.toggleCell(row, col);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
